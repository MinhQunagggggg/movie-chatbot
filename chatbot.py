from datetime import datetime
from utils import clean_text, detect_intent, extract_movie_name, fuzzy_find_movie_name
from db_queries import (
    load_movies_data, get_movies_showing_today, get_multiple_nearest_showtimes,
    get_nearest_showtime_for, get_showtime_today_for, get_movies_by_genre_today
)

_movies_cache = None  # B·ªô nh·ªõ ƒë·ªám c·ª•c b·ªô

def get_movies():
    global _movies_cache
    if _movies_cache is None:
        try:
            _movies_cache = load_movies_data()
        except Exception as e:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ load d·ªØ li·ªáu phim: {e}")
            _movies_cache = []
    return _movies_cache


def generate_answer(user_input: str):
    movies = get_movies()
    user_clean = clean_text(user_input)
    intent = detect_intent(user_input)
    movie_candidate = extract_movie_name(user_input)
    phim = fuzzy_find_movie_name(movie_candidate, movies) if movie_candidate else None
    raw_name = movie_candidate.strip()

    if intent == "genre_query":
        genres = [
            "h√†nh ƒë·ªông", "phi√™u l∆∞u", "h√†i", "kinh d·ªã", "t√¢m l√Ω", "t√¨nh c·∫£m",
            "khoa h·ªçc vi·ªÖn t∆∞·ªüng", "ho·∫°t h√¨nh", "chi·∫øn tranh", "h√¨nh s·ª±", "vi·ªÖn t√¢y",
            "√¢m nh·∫°c", "th·ªÉ thao", "t√†i li·ªáu", "gia ƒë√¨nh", "l·ªãch s·ª≠", "gi·∫£ t∆∞·ªüng",
            "si√™u anh h√πng", "anime", "phim ng·∫Øn"
        ]
        genre_matched = next((g for g in genres if g in user_input.lower()), None)
        if genre_matched:
            genre_movies = get_movies_by_genre_today(genre_matched)
            if genre_movies:
                return f"C√°c phim th·ªÉ lo·∫°i phim {genre_matched.title()} h√¥m nay:\n" + "\n".join(
                    f"üé¨ {m}" for m in genre_movies)
            else:
                return f"‚ùå Kh√¥ng c√≥ phim th·ªÉ lo·∫°i {genre_matched.title()} ƒëang chi·∫øu h√¥m nay."

    if intent == "actor" and not phim:
        act_matches = [m for m in movies if any(raw_name in actor for actor in m["actors_clean"])]
        if act_matches:
            phim_names = ", ".join(sorted(set(m["movie_name_vn"] for m in act_matches)))
            return f"Di·ªÖn vi√™n {raw_name.title()} c√≥ trong c√°c phim: {phim_names}"
        else:
            return f"T√¥i kh√¥ng t√¨m th·∫•y phim n√†o c√≥ di·ªÖn vi√™n {raw_name.title()}."

    if intent == "director" and not phim:
        dir_matches = [m for m in movies if raw_name in m["dir_clean"]]
        if dir_matches:
            phim_names = ", ".join(sorted(set(m["movie_name_vn"] for m in dir_matches)))
            return f"{dir_matches[0]['director']} ƒê·∫°o di·ªÖn phim: {phim_names}"
        else:
            return f"T√¥i kh√¥ng t√¨m th·∫•y ƒë·∫°o di·ªÖn n√†o t√™n {raw_name.title()}."

    if intent is None and phim:
        return f"B·∫°n ƒëang h·ªèi v·ªÅ phim {phim['movie_name_vn']}. Vui l√≤ng n√≥i r√µ b·∫°n mu·ªën bi·∫øt g√¨: n·ªôi dung, trailer, di·ªÖn vi√™n...?"

    if intent == "today_movies":
        movies_today = get_movies_showing_today()
        return "H√¥m nay ƒëang chi·∫øu c√°c phim:\n" + "\n".join(f"üéûÔ∏è {m}" for m in movies_today) if movies_today else "Kh√¥ng c√≥ phim n√†o ƒëang chi·∫øu h√¥m nay."

    # ‚ú≥Ô∏è B·ªî SUNG x·ª≠ l√Ω khi c√≥ t·ª´ 'su·∫•t chi·∫øu' nh∆∞ng kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c intent
    if not intent and phim and "suat chieu" in user_clean:
        return get_showtime_today_for(phim["movie_name_vn"])

    if intent == "showtime" and phim:
        return get_showtime_today_for(phim["movie_name_vn"])

    if intent == "nearest_showtime_multiple":
        return "\n".join(get_nearest_showtime_for(phim["movie_name_vn"])) if phim else get_multiple_nearest_showtimes()

    if intent == "nearest_showtime_for_movie":
        return get_nearest_showtime_for(phim["movie_name_vn"]) if phim else "B·∫°n mu·ªën xem su·∫•t chi·∫øu g·∫ßn nh·∫•t c·ªßa phim n√†o?"

    if phim:
        if intent == "trailer":
            return f"https://youtu.be/{phim['trailer_id']}" if phim.get("trailer_id") else f"Phim {phim['movie_name_vn']} ch∆∞a c√≥ trailer."
        elif intent == "content":
            return f"N·ªôi dung phim {phim['movie_name_vn']}: {phim['content']}"
        elif intent == "duration":
            return f"Phim {phim['movie_name_vn']} c√≥ th·ªùi l∆∞·ª£ng {phim['duration']} ph√∫t."
        elif intent == "director":
            return f"Phim {phim['movie_name_vn']} do {phim['director']} ƒë·∫°o di·ªÖn."
        elif intent == "actor":
            return f"Di·ªÖn vi√™n trong phim {phim['movie_name_vn']} g·ªìm: {phim['actor']}"
        elif intent == "rating":
            return f"Phim {phim['movie_name_vn']} ƒë∆∞·ª£c ƒë√°nh gi√° {phim.get('rating', 'ch∆∞a c√≥')} ƒëi·ªÉm."

    return "T√¥i ch∆∞a c√≥ d·ªØ li·ªáu ph√π h·ª£p ƒë·ªÉ tr·∫£ l·ªùi."



def main():
    print("üé¨ Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ v·ªÅ phim h√¥m nay? (G√µ 'exit' ƒë·ªÉ tho√°t)\n")
    while True:
        try:
            user_input = input("üë§ B·∫°n: ").strip()
            if user_input.lower() in ["exit", "quit", "thoat"]:
                print("üëã T·∫°m bi·ªát!")
                break
            response = generate_answer(user_input)
            print(f"ü§ñ Bot: {response}\n")
        except KeyboardInterrupt:
            print("\nüëã T·∫°m bi·ªát!")
            break
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói x·∫£y ra: {str(e)}\n")


if __name__ == "__main__":
    main()
